#!/usr/bin/env bash
set -o errexit -o nounset -o pipefail; shopt -s nullglob
root=${0%/*}
file=$(basename "${BASH_SOURCE[0]}")

. $root/../lib/cli-utils
. $root/../lib/thinder-environment.sh
. $root/../lib/fileservices.sh
. $root/../lib/config.sh

set_thinder_command "Manage instances" "instances"

function usage {
	local cmdlen=${#file}
	echo "Usage: ${file/\-/ } [args...]"
	echo
	echo $THINDER_DESCRIPTION
	echo
	echo "Options:"
	echo "  -h, --help                        Print this usage information"
	echo
	echo "Commands:"
	echo "    create IMAGE [NAME]             Create a new instance"
	echo
	echo "    kill INSTANCE                   Kill a running instance"
	echo
	echo "    proc INSTANCE                   List all processes running in an instance"
	echo
	echo "    config INSTANCE                 Configure the instance parameters"
	echo
	echo "    attach INSTANCE                 Attach to an instance console session"
	echo
	echo "    exec INSTANCE CMD               Execute a command in a running instance"
	echo
	echo "    set INSTANCE KEY=VALUE          Manipulate the instance settings"
	echo
	echo "    start INSTANCE                  Start an instance"
	echo "        -a, --attach                Attach to the console session"
	echo
	echo "    status INSTANCE                 Print the instance status"
	echo
}

if [[ $# -eq 0 ]]; then
	# no parameters
	debug "no parameters given, print out usage"
	usage
	exit 0
fi

while thinder_getopt "${1:-}" opt val; do
	debug "processing subcommand option $opt"
	case $opt in
		--help | -h)
			usage
			exit 0;
			;;
		*)
			error "unknown option: $opt"
			exit 1
	esac
	shift
done

case "${1:-}" in
	create)
		shift
		INSTANCE_NAME="${2:-}"
		
		[[ "${1:-}" == "" ]] && critical "thinder instace create requires a IMAGE parameter" && exit 1
		thinder_check_storage || (critical "Storage is not sane, creating an instance is not possible" && exit 1)
		[[ ! -d "$THINDER_ROOT/instances" ]] && mkdir -p "$THINDER_ROOT/instances"
		
		thinder_get_image_id_from_string $1 IMAGE_ID || true

		if [[ ! "$IMAGE_ID" = "" ]]; then

			get_uid INSTANCE_ID

			import_config_file "$THINDER_ROOT/images/${IMAGE_ID}/meta"
			IMAGE_NAME=$name
			IMAGE_VERSION=$version
			
			info "Creating an instance from image '$IMAGE_NAME', version '$IMAGE_VERSION'..."
			
			if [[ "$INSTANCE_NAME" = "" ]]; then
				INSTANCE_NAME="${IMAGE_NAME}_${IMAGE_VERSION}"
			fi 
			
			# check if this name and version already exist
			newname=""
			c=2
			thinder_get_instance_id_from_name "$INSTANCE_NAME" oid || true
			while [[ ! "$oid" == "" ]]; do
				newname="${INSTANCE_NAME}_$c"
				thinder_get_instance_id_from_name "$newname" oid || true
				(( c++ ))
			done
			if [[ ! "$newname" = "" ]]; then
				INSTANCE_NAME="$newname"
			fi
			
			info "The instance shall be named '$INSTANCE_NAME'"
			
			# TODO: depencency on btrfs, if the user doesn't use BTRFS, this should be handled by a simple cp
			mkdir "$THINDER_ROOT/instances/$INSTANCE_ID"
			btrfs subvolume snapshot "$THINDER_ROOT/images/$IMAGE_ID/payload" "$THINDER_ROOT/instances/$INSTANCE_ID/root" > /dev/null
			cp "$THINDER_ROOT/images/$IMAGE_ID/thinderfile" "$THINDER_ROOT/instances/$INSTANCE_ID/thinderfile"
			cat > "$THINDER_ROOT/instances/$INSTANCE_ID/meta" <<EOL
name=${INSTANCE_NAME}
image.name=${IMAGE_NAME} 
image.version=${IMAGE_VERSION}
image.id=${IMAGE_ID}
creationdate=$(date +"%Y-%m-%d %H:%M:%S")
EOL

			notice "Instance '$INSTANCE_NAME' created succesfully"
			
			info "Instance ID is $INSTANCE_ID"
		else
			critical "'${1}' is not a valid image ID or identifier"
		fi
		;;
	list)
		shift
		printf "ID\t\tActive\tName\t\t\tDate\t\t\tBase\t\t\tSize\n"
		hasinstances=0
		for instance in "$THINDER_ROOT/instances/"*; do
			if [[ -d "$instance" ]] && [[ -f "$instance/meta" ]]; then
				hasinstances=1
				import_config_file "$instance/meta"
				ID=$(basename "$instance")
				#size=$(du -s $instance | awk '{print $1}' | human)
				get_btrfs_subvolume_size "$instance" disksize
				disksize="$(echo $disksize | human)"
				printf "$ID\t \t%-24s%-24s%-24s$disksize\n" $name "$creationdate" "$image_name:$image_version"
			fi
		done
		if [[ hasinstances -eq 0 ]]; then
			printf " No instances in this storage environment available\n"
		fi
		echo
		;;
	delete)
		shift
		[[ "${1:-}" == "" ]] && critical "thinder instance delete requires an ID parameter" && exit 1
		thinder_check_storage || (critical "Storage is not sane, deleting an image is not possible" && exit 1)
		if [[ -d "$THINDER_ROOT/instances/$1" ]]; then
			btrfs subvolume delete "$THINDER_ROOT/instances/$1/root" > /dev/null
			rm -rf "$THINDER_ROOT/instances/$1"
			notice "instance with ID '$1' has been deleted"
			exit 0
		else
			error "instance with ID '$1' is not found" && exit 1
		fi
		;;
	*)
		critical "'${1}' is not a valid $file subcommand"
		exit 1
esac
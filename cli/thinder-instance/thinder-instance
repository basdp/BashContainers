#!/usr/bin/env bash
set -o errexit -o nounset -o pipefail; shopt -s nullglob
set +m
root=${0%/*}
file=$(basename "${BASH_SOURCE[0]}")

. ${0%/*}/../lib/loader.sh

include lib/cli-utils
include lib/thinder-environment.sh
include lib/fileservices.sh
include lib/config.sh 
include lib/os.sh
include lib/lock.sh
include lib/network.sh

set_thinder_command "Manage instances" "instances"

function usage {
	local cmdlen=${#file}
	echo "Usage: ${file/\-/ } [args...]"
	echo
	echo $THINDER_DESCRIPTION
	echo
	echo "Options:"
	echo "  -h, --help                        Print this usage information"
	echo
	echo "Commands:"
	echo "    create IMAGE [NAME]             Create a new instance"
	echo
	echo "    kill INSTANCE                   Kill a running instance"
	echo
	echo "    proc INSTANCE                   List all processes running in an instance"
	echo
	echo "    config INSTANCE                 Configure the instance parameters"
	echo
	echo "    attach INSTANCE                 Attach to an instance console session"
	echo
	echo "    exec INSTANCE CMD               Execute a command in a running instance"
	echo
	echo "    set INSTANCE KEY=VALUE          Manipulate the instance settings"
	echo
	echo "    start INSTANCE                  Start an instance"
	echo "        -a, --attach                Attach to the console session"
	echo
	echo "    status INSTANCE                 Print the instance status"
	echo
}

if [[ $# -eq 0 ]]; then
	# no parameters
	debug "no parameters given, print out usage"
	usage
	exit 0
fi

function thinder_instance_exec {
	if thinder_get_instance_id_from_string "$1" INSTANCE_ID; then
		if is_instance_running $INSTANCE_ID; then
			pid=`cat "$THINDER_ROOT/instances/$INSTANCE_ID/running.pid"`
			cmd="$2"
			! ${3:-false} && cmd="env - TERM=xterm $cmd"
			nsenter -t $pid -m -u -i -n -p chroot "$THINDER_ROOT/instances/$INSTANCE_ID/root" sh -c "$cmd"
		else
			critical "Instance $INSTANCE_ID is not running"
		fi
	else
		error "instance '$1' not found" && exit 1
	fi
}
while thinder_getopt "${1:-}" opt val; do
	debug "processing subcommand option $opt"
	case $opt in
		--help | -h)
			usage
			exit 0;
			;;
		*)
			error "unknown option: $opt"
			exit 1
	esac
	shift
done

case "${1:-}" in
	create)
		shift
		INSTANCE_NAME="${2:-}"
		
		[[ "${1:-}" == "" ]] && critical "thinder instace create requires a IMAGE parameter" && exit 1
		thinder_check_storage || (critical "Storage is not sane, creating an instance is not possible" && exit 1)
		[[ ! -d "$THINDER_ROOT/instances" ]] && mkdir -p "$THINDER_ROOT/instances"
		
		thinder_get_image_id_from_string $1 IMAGE_ID || true

		if [[ ! "$IMAGE_ID" = "" ]]; then

			get_uid INSTANCE_ID

			import_config_file "$THINDER_ROOT/images/${IMAGE_ID}/meta"
			IMAGE_NAME=$name
			IMAGE_VERSION=$version
			
			info "Creating an instance from image '$IMAGE_NAME', version '$IMAGE_VERSION'..."
			
			if [[ "$INSTANCE_NAME" = "" ]]; then
				INSTANCE_NAME="${IMAGE_NAME}_${IMAGE_VERSION}"
			fi 
			
			# check if this name and version already exist
			newname=""
			c=2
			thinder_get_instance_id_from_name "$INSTANCE_NAME" oid || true
			while [[ ! "$oid" == "" ]]; do
				newname="${INSTANCE_NAME}_$c"
				thinder_get_instance_id_from_name "$newname" oid || true
				(( c++ ))
			done
			if [[ ! "$newname" = "" ]]; then
				INSTANCE_NAME="$newname"
			fi
			
			info "The instance shall be named '$INSTANCE_NAME'"
			
			# TODO: depencency on btrfs, if the user doesn't use BTRFS, this should be handled by a simple cp
			mkdir "$THINDER_ROOT/instances/$INSTANCE_ID"
			btrfs subvolume snapshot "$THINDER_ROOT/images/$IMAGE_ID/payload" "$THINDER_ROOT/instances/$INSTANCE_ID/root" > /dev/null
			cp "$THINDER_ROOT/images/$IMAGE_ID/thinderfile" "$THINDER_ROOT/instances/$INSTANCE_ID/thinderfile"
			cat > "$THINDER_ROOT/instances/$INSTANCE_ID/meta" <<EOL
name=${INSTANCE_NAME}
image.name=${IMAGE_NAME} 
image.version=${IMAGE_VERSION}
image.id=${IMAGE_ID}
creationdate=$(date +"%Y-%m-%d %H:%M:%S")
EOL

			notice "Instance '$INSTANCE_NAME' created succesfully"
			
			info "Instance ID is $INSTANCE_ID"
		else
			critical "'${1}' is not a valid image ID or identifier"
		fi
		;;
	list)
		shift
		printf "ID\t\tActive\tName\t\t\tDate\t\t\tBase\t\t\tSize\t\tIP\n"
		hasinstances=0
		for instance in "$THINDER_ROOT/instances/"*; do
			if [[ -d "$instance" ]] && [[ -f "$instance/meta" ]]; then
				hasinstances=1
				import_config_file "$instance/meta"
				ID=$(basename "$instance")
				#size=$(du -s $instance | awk '{print $1}' | human)
				get_btrfs_subvolume_size "$instance" disksize
				disksize="$(echo $disksize | human)"
				active=" "
				ip=""
				if is_instance_running "$ID"; then
					active='*'
					ip="$(cat $instance/ip_address)"
				fi
				printf "$ID\t$active\t%-24s%-24s%-24s$disksize\t$ip\n" $name "$creationdate" "$image_name:$image_version"
			fi
		done
		if [[ hasinstances -eq 0 ]]; then
			printf " No instances in this storage environment available\n"
		fi
		echo
		;;
	delete)
		shift
		[[ "${1:-}" == "" ]] && critical "thinder instance delete requires an ID parameter" && exit 1
		thinder_check_storage || (critical "Storage is not sane, deleting an instance is not possible" && exit 1)
		if thinder_get_instance_id_from_string "$1" INSTANCE_ID; then
			if is_instance_running $INSTANCE_ID; then 
				critical "Instance $INSTANCE_ID is running, please kill it first"
				exit 1
			fi
			btrfs_recursive_delete "$THINDER_ROOT/instances/$INSTANCE_ID/root"
			rm -rf "$THINDER_ROOT/instances/$INSTANCE_ID"
			
			notice "instance with ID '$INSTANCE_ID' has been deleted"
			exit 0
		else
			error "instance '$1' is not found" && exit 1
		fi
		;;
	start)
		shift
		attach=false
		keep_env=false
		while thinder_getopt "${1:-}" opt val; do
			debug "processing subsubcommand option $opt"
			case $opt in
				--attach | -a)
					attach=true
					;;
				*)
					critical "unknown option: $opt"
					exit 1
			esac
			shift
		done
		
		cgroups='cpu,cpuacct,cpuset,memory'
		
		[[ "${1:-}" == "" ]] && critical "thinder instance start requires an INSTANCE parameter" && exit 1
		thinder_check_storage || (critical "Storage is not sane, starting an instance is not possible" && exit 1)
		thinder_check_network_environment || (critical "Network is not sane, starting an instance is not possible" && exit 1)
		if thinder_get_instance_id_from_string "$1" INSTANCE_ID; then
			if is_instance_running $INSTANCE_ID; then 
				critical "Instance $INSTANCE_ID is already running"
				exit 1
			fi
			#nproc alt: $(($(-i "^Processor\(\\s\)\+:" /proc/cpuinfo | wc -l)-1))
			cgcreate -g "$cgroups:/thinder_$INSTANCE_ID"
			cgset -r cpuset.cpus=0-$(($(nproc)-1)) "thinder_$INSTANCE_ID" 
			cgset -r cpuset.mems=0 "thinder_$INSTANCE_ID"
			cgset -r memory.limit_in_bytes=512000000 "thinder_$INSTANCE_ID"
			
			#inject_thinder_init "$THINDER_ROOT/instances/$INSTANCE_ID/root"
			
			[[ ! -f "$THINDER_ROOT/last_allocated_ip" ]] && echo 1 > "$THINDER_ROOT/last_allocated_ip"
			echo "$(( $(cat $THINDER_ROOT/last_allocated_ip) + 1 ))" > "$THINDER_ROOT/last_allocated_ip"
			ip="$(cat "$THINDER_ROOT/last_allocated_ip")"
			if [[ "$ip" -ge 255 ]]; then
				info "IP rotation has reached 255, returning to 2"
				echo 2 > "$THINDER_ROOT/last_allocated_ip"
				ip="2"
			fi
			
			nsid="${INSTANCE_ID:0:5}"
			ip link del dev veth0_"$nsid" > /dev/null 2>&1 || true
			ip netns del netns_"$nsid" > /dev/null 2>&1 || true
			ip link add dev veth0_"$nsid" type veth peer name veth1_"$nsid"
			ip link set dev veth0_"$nsid" up
			ip link set veth0_"$nsid" master thinder0
			ip netns add netns_"$nsid"
			ip link set veth1_"$nsid" netns netns_"$nsid"
			ip netns exec netns_"$nsid" ip link set dev lo up
			ip netns exec netns_"$nsid" ip link set veth1_"$nsid" address 02:42:ac:11:00:"$ip"
			ip netns exec netns_"$nsid" ip addr add 10.20.0."$ip"/24 dev veth1_"$nsid"
			ip netns exec netns_"$nsid" ip link set dev veth1_"$nsid" up
			ip netns exec netns_"$nsid" ip route add default via 10.20.0.1
			
			nohup \
			cgexec -g "$cgroups:/thinder_$INSTANCE_ID" \
			ip netns exec netns_"$nsid" \
			unshare -fmuip --mount-proc \
			chroot "$THINDER_ROOT/instances/$INSTANCE_ID/root" \
			/sbin/init > "$THINDER_ROOT/instances/$INSTANCE_ID/instance.log" 2>&1 &
			isolation_pid=$!
			sleep 1
			while [[ ! "$(ps -p "$isolation_pid" -o comm=)" == "unshare" ]]; do
				isolation_pid=$(ps -o pid --no-headers --ppid "${isolation_pid}" || true | awk '{print $1}')
			done
			debug "Isolation PID is $isolation_pid"
			pid=$(ps -o pid --no-headers --ppid ${isolation_pid} | awk '{print $1}')
			info "Container PID is $pid"
			info "Container IP is 10.20.0.$ip"
			notice "Instance with ID $INSTANCE_ID has been started"
			echo "$pid" > "$THINDER_ROOT/instances/$INSTANCE_ID/running.pid"
			echo 10.20.0."$ip" > "$THINDER_ROOT/instances/$INSTANCE_ID/ip_address"
			
			if $attach; then
				thinder_instance_exec "$INSTANCE_ID" "login"
			fi
			
			exit 0
		else
			error "instance '$1' not found" && exit 1
		fi
		;;
	exec)
		shift
		keep_env=false
		while thinder_getopt "${1:-}" opt val; do
			debug "processing subsubcommand option $opt"
			case $opt in
				--env)
					keep_env=true
					;;
				*)
					critical "unknown option: $opt"
					exit 1
			esac
			shift
		done
		
		[[ "${1:-}" == "" ]] && critical "thinder instance exec requires an INSTANCE parameter" && exit 1
		thinder_check_storage || (critical "Storage is not sane, exec is not possible" && exit 1)
		instance=$1
		shift
		cmd="$@"
		thinder_instance_exec "$instance" "$cmd" $keep_env
		;;
		
	attach)
		shift		
		[[ "${1:-}" == "" ]] && critical "thinder instance exec requires an INSTANCE parameter" && exit 1
		thinder_check_storage || (critical "Storage is not sane, exec is not possible" && exit 1)
		thinder_instance_exec "$1" "login"
		;;
	kill)
		shift
		[[ "${1:-}" == "" ]] && critical "thinder instance kill requires an INSTANCE parameter" && exit 1
		thinder_check_storage || (critical "Storage is not sane, killing an instance is not possible" && exit 1)
		if thinder_get_instance_id_from_string "$1" INSTANCE_ID; then
			if is_instance_running $INSTANCE_ID; then
				pid=`cat "$THINDER_ROOT/instances/$INSTANCE_ID/running.pid"`
				killtree $pid 9
				mount | grep "\son\s$THINDER_ROOT/instances/$INSTANCE_ID/root" | awk '{print $3}' | xargs -n1 umount -f > /dev/null 2>&1 || true 
				nsid="${INSTANCE_ID:0:5}"
				ip link del dev veth0_"$nsid"
				ip netns del netns_"$nsid"
				notice "Instance $INSTANCE_ID has been killed"
				rm -f "$THINDER_ROOT/instances/$INSTANCE_ID/running.pid"
			else
				critical "Instance $INSTANCE_ID is not running"
			fi
		else
			error "instance '$1' not found" && exit 1
		fi
		;; 
	stop)
		shift		
		[[ "${1:-}" == "" ]] && critical "thinder instance stop requires an INSTANCE parameter" && exit 1
		thinder_check_storage || (critical "Storage is not sane, stop is not possible" && exit 1)
		thinder_instance_exec "$1" "kill \$(cat /var/thinder/thinder_up.pid)"
		;;
	proc)
		shift		
		[[ "${1:-}" == "" ]] && critical "thinder instance proc requires an INSTANCE parameter" && exit 1
		thinder_check_storage || (critical "Storage is not sane, proc is not possible" && exit 1)
		thinder_instance_exec "$1" "ps auxf"
		;;
	*)
		critical "'${1}' is not a valid $file subcommand"
		exit 1
esac

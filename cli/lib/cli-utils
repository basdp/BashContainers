#!/usr/bin/env bash
[[ $_ == $0 ]] && echo "this is not an executable" && exit 1

LOG_LEVEL="${LOG_LEVEL:-6}" # 7 = debug, 0 = emergency

function _fmt {
	local color_ok="\x1b[32m"
	local color_bad="\x1b[31m"
	
	local color="${color_bad}"
	if [ "${1}" = "debug" ] || [ "${1}" = "info" ] || [ "${1}" = "notice" ]; then
		color="${color_ok}"
	fi
	
	local color_reset="\x1b[0m"
	if [[ "${TERM}" != "xterm"* ]] || [ -t 1 ]; then
		# don't use colors on pipes or non-recognized terminals
		color=""; color_reset=""
	fi
	echo -e "$(date -u +"%Y-%m-%d %H:%M:%S UTC") ${color}$(printf "[%9s]" ${1})${color_reset}"
}

function emergency () {                             echo "$(_fmt emergency) ${@}" 1>&2 || true; exit 1; }
function alert ()     { [ "${LOG_LEVEL}" -ge 1 ] && echo "$(_fmt alert) ${@}" 1>&2 || true; }
function critical ()  { [ "${LOG_LEVEL}" -ge 2 ] && echo "$(_fmt critical) ${@}" 1>&2 || true; }
function error ()     { [ "${LOG_LEVEL}" -ge 3 ] && echo "$(_fmt error) ${@}" 1>&2 || true; }
function warning ()   { [ "${LOG_LEVEL}" -ge 4 ] && echo "$(_fmt warning) ${@}" 1>&2 || true; }
function notice ()    { [ "${LOG_LEVEL}" -ge 5 ] && echo "$(_fmt notice) ${@}" 1>&2 || true; }
function info ()      { [ "${LOG_LEVEL}" -ge 6 ] && echo "$(_fmt info) ${@}" 1>&2 || true; }
function debug ()     { [ "${LOG_LEVEL}" -ge 7 ] && echo "$(_fmt debug) ${@}" 1>&2 || true; }

function set_thinder_description {
	argc=${BASH_ARGC:-0}
	if [[ $argc -gt 0 ]] && [[ "${BASH_ARGV[${#BASH_ARGV[@]}-1]}" == "__descr" ]]; then
		echo $1
		exit 0
	fi
}
#!/usr/bin/env bash
[[ $_ == $0 ]] && echo "this is not an executable" && exit 1
dir="$( dirname "${BASH_SOURCE[0]}" )"

. $dir/upvars.sh

LOG_LEVEL="${LOG_LEVEL:-5}" # 7 = debug, 0 = emergency

function _fmt {
	local color_ok="\x1b[32m"
	local color_bad="\x1b[31m"
	local color_warning="\x1b[33m"
	local color_reset="\x1b[0m"
	
	local color="${color_bad}"
	if [ "${1}" = "notice" ]; then
		color="${color_ok}"
	fi
	if [ "${1}" = "warning" ]; then
		color="${color_warning}"
	fi
	if [ "${1}" = "debug" ] || [ "${1}" = "info" ]; then
		color="${color_reset}"
	fi
	
	if [[ "${TERM}" != "xterm"* ]] || [ -t 1 ]; then
		# don't use colors on pipes or non-recognized terminals
		color=""; color_reset=""
	fi
	echo -e "$(date +"%Y-%m-%d %H:%M:%S") ${color}$(printf "%-9s" ${1})${color_reset}"
}

function emergency {                             echo "$(_fmt emergency) ${@}" 1>&2 || true; exit 1; }
function alert     { [ "${LOG_LEVEL}" -ge 1 ] && echo "$(_fmt alert) ${@}" 1>&2 || true; }
function critical  { [ "${LOG_LEVEL}" -ge 2 ] && echo "$(_fmt critical) ${@}" 1>&2 || true; }
function error     { [ "${LOG_LEVEL}" -ge 3 ] && echo "$(_fmt error) ${@}" 1>&2 || true; }
function warning   { [ "${LOG_LEVEL}" -ge 4 ] && echo "$(_fmt warning) ${@}" 1>&2 || true; }
function notice    { [ "${LOG_LEVEL}" -ge 5 ] && echo "$(_fmt notice) ${@}" 1>&2 || true; }
function info      { [ "${LOG_LEVEL}" -ge 6 ] && echo "$(_fmt info) ${@}" 1>&2 || true; }
function debug     { [ "${LOG_LEVEL}" -ge 7 ] && echo "$(_fmt debug) ${@}" 1>&2 || true; }

function set_thinder_command {
	THINDER_DESCRIPTION=$1
	argc=${BASH_ARGC:-0}
	if [[ $argc -gt 0 ]] && [[ "${BASH_ARGV[${#BASH_ARGV[@]}-1]}" == "__descr" ]]; then
		echo $1
		echo ${2:-}
		exit 0
	fi
}

function thinder_getopt {
	local param="$1"
	if [[ "$param" == "" ]]; then
		return 1
	elif [[ "$param" == "--"* ]] && [[ ${#param} -gt 2 ]]; then
		# long option
		local arr=(${param/\=/ })
    	local "$2" "$3" && upvars -v "$2" "${arr[0]}" -v "$3" "${arr[1]:-}"
	elif [[ "$param" == "-"* ]] && [[ ${#param} -gt 1 ]] && [[ ! "$param" == "--" ]]; then
		# short option
    	local arr=(${param/\=/ })
    	local "$2" "$3" && upvars -v "$2" "${arr[0]}" -v "$3" "${arr[1]:-}"
	else
		return 1
	fi
	return 0
}

function get_uid {
	local UUID=$(cat /proc/sys/kernel/random/uuid)
	local ID=${UUID:${#UUID}-12}
	local "$1" && upvar $1 "${ID}";
}

function human {
	awk 'function human(x) {
         s=" B   KiB MiB GiB TiB EiB PiB YiB ZiB"
         while (x>=1024 && length(s)>1) 
               {x/=1024; s=substr(s,5)}
         s=substr(s,1,4)
         xf=(s==" B  ")?"%5d   ":"%0.2f"
         return sprintf( xf"%s\n", x, s)
      }
      {gsub(/^[0-9]+/, human($1)); print}'
}
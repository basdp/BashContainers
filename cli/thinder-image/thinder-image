#!/usr/bin/env bash
set -o errexit -o nounset -o pipefail; shopt -s nullglob
file=$(basename "${BASH_SOURCE[0]}")
. ${0%/*}/../lib/loader.sh

include lib/cli-utils
include lib/thinder-environment.sh
include lib/fileservices.sh
include lib/config.sh 

set_thinder_command "List and manage images" "images"

function usage {
	local cmdlen=${#file}
	echo "Usage: ${file/\-/ } [args...]"
	echo
	echo $THINDER_DESCRIPTION
	echo
	echo "Options:"
	echo "  -h, --help                     Print this usage information"
	echo
	echo "Commands:"
	echo "    list                         List all available images"
	echo
	echo "    import [args...] LOCATION    Import an image into the storage environment"
	echo "        --name=s                 Set the imported image name"
	echo "        --version=s              Set the imported image version" 
	echo
	echo "    export LOCATION              Export an image"
	echo "        --no-archive             Do not pack the filesystem into an archive"
	echo
	echo "    delete ID                    Import an image into the storage environment"
	echo
	echo "    rename ID NAME               Rename an image"
	echo
	echo "    setver ID VERSION            Set the version of an image"
	echo
}

if [[ $# -eq 0 ]]; then
	# no parameters
	debug "no parameters given, print out usage"
	usage
	exit 0
fi

while thinder_getopt "${1:-}" opt val; do
	debug "processing subcommand option $opt"
	case $opt in
		--help | -h)
			usage
			exit 0;
			;;
		*)
			error "unknown option: $opt"
			exit 1
	esac
	shift
done

function image_set_meta {
	[[ ! -d "$THINDER_ROOT/images/$1" ]] && critical "Image with ID '$1' is not found" && exit 1
	
	sed -i 's/^'$2'\s*=.*$/'$2'='$3'/' "$THINDER_ROOT/images/${1}/meta"
}

function image_rename {
	[[ ! $2 =~ ^[a-zA-Z][a-zA-Z0-9\_]*$ ]] && critical "Image name may only contain alphanumeric characters and may not start with a number" && exit 1
	image_set_meta $1 name $2
}

function image_set_version {
	[[ ! $2 =~ ^[a-zA-Z0-9\.\-\+,\_]+$ ]] && critical "Image version may only contain the following characters: a-z, A-Z, 0-9, '.', '-', '_', '+', ','" && exit 1
	image_set_meta $1 version $2
}

case "${1:-}" in
	import)
		shift
		NAME=""
		VERSION=""
		while thinder_getopt "${1:-}" opt val; do
			debug "processing subsubcommand option $opt"
			case $opt in
				--name)
					if [[ "$val" == "" ]]; then
						critical "$opt expects a parameter"
						exit 1
					fi
					NAME="$val"
					;;
				--version)
					if [[ "$val" == "" ]]; then
						critical "$opt expects a parameter"
						exit 1
					fi
					VERSION="$val"
					;;
				*)
					critical "unknown option: $opt"
					exit 1
			esac
			shift
		done
		
		[[ "${1:-}" == "" ]] && critical "thinder images import requires a LOCATION parameter" && exit 1
		thinder_check_storage || (critical "Storage is not sane, importing an image is not possible" && exit 1)
		if [[ -d "$1" ]]; then
			# extracted image
			( [[ -d "$1/payload" ]] || [[ -f "$1/payload.tar.gz" ]] ) && [[ -e "$1/meta" ]] && [[ -e "$1/thinderfile" ]] || (critical "'$1' is not a valid image" && exit 1)
			[[ ! -d "$THINDER_ROOT/images" ]] && mkdir -p "$THINDER_ROOT/images"
			get_uid ID
			if copytree "$1" "$THINDER_ROOT/images/${ID}"; then
				# check if we need to extract the payload
				if [[ -f "$THINDER_ROOT/images/${ID}/payload.tar.gz" ]]; then
					info "Extracting image payload..."
					extract_targz "$THINDER_ROOT/images/${ID}/payload.tar.gz" "$THINDER_ROOT/images/${ID}"
					if [[ ! $? = 0 ]]; then
						critical "Could not extract image payload"
						rm -rf "$THINDER_ROOT/images/${ID}"
						exit 1
					fi
					rm -rf "$THINDER_ROOT/images/${ID}/payload.tar.gz"
				fi
				info "Creating BTRFS subvolume..."
				mv "$THINDER_ROOT/images/${ID}/payload" "$THINDER_ROOT/images/${ID}/payload.tmp"
				btrfs subvolume create "$THINDER_ROOT/images/${ID}/payload"
				sleep 1
				mv "$THINDER_ROOT/images/${ID}/payload.tmp/"* "$THINDER_ROOT/images/${ID}/payload/"
				rmdir "$THINDER_ROOT/images/${ID}/payload.tmp"

				notice "Image imported succesfully"
				
				# handle the rename and reversion actions
				if [[ ! "$NAME" = "" ]]; then
					info "Rename the image to '$NAME'"
					image_rename $ID $NAME
				fi 
				if [[ ! "$VERSION" = "" ]]; then
					info "Set the image version to '$VERSION'"
					image_set_version $ID $VERSION
				fi
				
				# check if this name and version already exist
				import_config_file "$THINDER_ROOT/images/${ID}/meta"
				mv "$THINDER_ROOT/images/${ID}/meta" "$THINDER_ROOT/images/${ID}/_tmp_meta"
				newname=""
				imagename="$name"
				c=2
				thinder_get_image_id_from_name_and_version $name $version oid || true
				while [[ ! "$oid" == "" ]]; do
					newname="${imagename}_$c"
					thinder_get_image_id_from_name_and_version $newname $version oid || true
					(( c++ ))
				done
				mv "$THINDER_ROOT/images/${ID}/_tmp_meta" "$THINDER_ROOT/images/${ID}/meta"
				if [[ ! "$newname" = "" ]]; then
					warning "Imported image has same name and version as already existing image"
					notice "Rename the image to '$newname'"
					image_rename $ID $newname
				fi
				
				info "image ID is $ID"
			else
				rm -rf "$THINDER_ROOT/images/${ID}"
				error "image import failed"
			fi
		elif [[ -e "$1" ]]; then
			critical "'$1' is of unknown format"
			exit 1
		else
			critical "No such file or directory: $1" 
		fi
		;;
	list)
		shift
		printf "ID\t\tName\t\t\tVersion\t\t\tSize\tArch\n"
		hasimages=0
		for image in "$THINDER_ROOT/images/"*; do
			if [[ -d "$image" ]] && [[ -f "$image/meta" ]]; then
				hasimages=1
				import_config_file "$image/meta"
				ID=$(basename "$image")
				size=$(du -hs $image | awk '{print $1}')
				arch="$(file --dereference $image/payload/sbin/init | awk -F ", " '{print $2}')"
				printf "$ID\t%-24s%-24s$size\t$arch\n" $name $version
			fi
		done
		if [[ hasimages -eq 0 ]]; then
			printf " No images in this storage environment available\n"
		fi
		echo
		;;
	delete)
		shift
		[[ "${1:-}" == "" ]] && critical "thinder images delete requires an ID parameter" && exit 1
		thinder_check_storage || (critical "Storage is not sane, importing an image is not possible" && exit 1)
		if [[ -d "$THINDER_ROOT/images/$1" ]]; then
			btrfs subvolume delete "$THINDER_ROOT/images/$1/payload" > /dev/null
			rm -rf "$THINDER_ROOT/images/$1"
			notice "image with ID '$1' has been deleted"
			exit 0
		else
			error "image with ID '$1' is not found" && exit 1
		fi
		;;
	rename)
		shift
		([[ "${1:-}" == "" ]] || [[ "${2:-}" == "" ]]) && critical "thinder images rename requires an ID and NAME parameter" && exit 1
		thinder_check_storage || (critical "Storage is not sane, importing an image is not possible" && exit 1)
		
		# check for conflicts 
		import_config_file "$THINDER_ROOT/images/$1/meta"
		thinder_get_image_id_from_name_and_version $2 $version oid || true
		if [[ ! "$oid" == "" ]]; then
			critical "Image with this name and version already exists"
			info "    Image ID: $oid"
			exit 1 
		fi 
		
		info "Rename image $1 to '$2'"
		image_rename $1 $2
		;;
	setver)
		shift
		([[ "${1:-}" == "" ]] || [[ "${2:-}" == "" ]]) && critical "thinder images setver requires an ID and VERSION parameter" && exit 1
		thinder_check_storage || (critical "Storage is not sane, importing an image is not possible" && exit 1)
		
		# check for conflicts 
		import_config_file "$THINDER_ROOT/images/$1/meta"
		thinder_get_image_id_from_name_and_version $name $2 oid || true
		if [[ ! "$oid" == "" ]]; then
			critical "Image with this name and version already exists"
			info "    Image ID: $oid"
			exit 1 
		fi 
		
		info "Set version of image $1 to '$2'"
		image_set_version $1 $2
		;;
	export)
		shift
		archive=true
		while thinder_getopt "${1:-}" opt val; do
			debug "processing subsubcommand option $opt"
			case $opt in
				--no-archive)
					archive=false
					;;
				*)
					critical "unknown option: $opt"
					exit 1
			esac
			shift
		done
		
		([[ "${1:-}" == "" ]] || [[ "${2:-}" == "" ]]) && critical "thinder images export requires an IMAGE and LOCATION parameter" && exit 1
		thinder_check_storage || (critical "Storage is not sane, importing an image is not possible" && exit 1)
		
		# check for conflicts 
		thinder_get_image_id_from_identifier "$1" oid || true
		if [[ "$oid" == "" ]]; then
			critical "Image $1 does not exist"
			exit 1 
		fi 
		
		info "Export image $1 to '$2'"
		if [[ -e "$2" ]]; then
			critical "$2 already exists"
			exit 1
		fi
		
		import_config_file "$THINDER_ROOT/images/$oid/meta"
		
		mkdir -p "$2"
		cp "$THINDER_ROOT/images/$oid/meta" "$2/meta"
		cp "$THINDER_ROOT/images/$oid/thinderfile" "$2/thinderfile"
		cp -a "$THINDER_ROOT/images/$oid/payload/" "$2/payload/" # cannot be on a FAT or network disk
		if $archive; then
			cd "$2"
			tar -cpzf payload.tar.gz ./payload/
			rm -rf ./payload
		fi
		
		notice "Image "$1" exported to $2"
		;;
	*)
		critical "'${1}' is not a valid $file subcommand"
		exit 1
esac